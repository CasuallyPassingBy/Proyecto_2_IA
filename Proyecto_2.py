'''
    Proyecto: Proyecto 2º Parcial: Busquedas Informadas
    Universidad Panamericana
    Clase de Inteligencia Artificial
    Alejandro Laphond Payan
    Mauricio Moscoso Mandujano
    Fernando Ruiz de Huidobro Zapata
    26-abril-2023
    version 0.01

    El presente codigo calcula la distancia euclideana entre dos ciudades 
    de los Estados Unidos Mexicanos, utilizando las coordenadas geograficas 
    de un par de ciudades. Esta distancia es utilizada para obtener los
    valores de la heuristica para el proyecto del 2do Parcial de la materia.
    
    Una vez que se ha obtenido el valor de la heurística del proyecto, el programa le pregunta al usuario que algoritmo 
    de busqueda informada quiere utilizar. Una vez que el usuario decide que algóritmo usar, el codigo lo ejecuta y muestra
    los datos pertinentes de cada uno de los algoritmos

    Ejecucion del programa
        Opcion 1) En una terminal que sobre el directorio donde radica este archivo escribir:
                    python Proyecto_2_IA.py
        Opcion 2) Abrir el archivo con un editor de codigo y presionar el boton ejecutar
    
    Entradas:
        1) El nombre de una ciudad en Mexico que deseemos sea el destino y la ciudad a partir de la cual deseamos empezar la busqueda.
    
    Salidas:
        1) Imprime el arbol de busqueda procesado tomando en cuenta la heurística. Dependiendo del algoritmo que el usuario el camino y los datos 
        particulares de cada algoritmo. Muestra el tiempo de ejecución de cada algoritmo y muestra error si es que aparece uno.
'''


formed_graph_unidireccional_pesos_heuristica = [
    [0, 143, 209, 407, 289, 590, 325, 725, 820, 494, 910, 1029, 961, 1128, 1178, 1244, 1140, 1294, 1317, 1207, 1448, 1349, 1359, 1472, 1079, 1381, 1217, 1244, 1410, 1345, 1583, 994, 1089, 1359, 1487, 1462, 1654, 1145, 1495, 1504, 1713, 1599, 1629, 1854, 1770, 1847, 1293, 1863, 2023, 2028, 1197, 1207, 1468, 2115, 2312, 2144, 1287, 1613, 2277, 2383, 2447, 1759, 1990, 1472, 2522, 2544, 1613, 2635, 2581, 3098, 3236, 2990, 3180, 3079, 2658, 2601, 2427, 2380], 
    [143, 0, 125, 264, 157, 449, 241, 583, 683, 357, 767, 888, 818, 985, 1037, 1102, 997, 1151, 1176, 1066, 1305, 1209, 1217, 1331, 937, 1238, 1077, 1107, 1275, 1206, 1441, 852, 956, 1222, 1352, 1335, 1513, 1021, 1362, 1366, 1579, 1471, 1505, 1735, 1632, 1709, 1178, 1733, 1919, 1904, 1084, 1115, 1365, 2019, 2198, 2027, 1193, 1516, 2196, 2295, 2340, 1649, 1903, 1385, 2434, 2438, 1532, 2540, 2480, 3007, 3143, 2894, 3085, 2980, 2548, 2484, 2306, 2255], 
    [209, 125, 0, 265, 231, 416, 121, 548, 627, 309, 745, 844, 815, 960, 993, 1103, 994, 1124, 1183, 1072, 1290, 1222, 1217, 1334, 939, 1230, 1088, 1127, 1301, 1217, 1438, 856, 987, 1239, 1378, 1376, 1515, 1068, 1392, 1383, 1606, 1508, 1550, 1788, 1646, 1723, 1238, 1766, 1988, 1949, 1147, 1199, 1438, 2097, 2255, 2081, 1276, 1594, 2286, 2379, 2406, 1714, 1988, 1472, 2517, 2505, 1623, 2618, 2552, 3088, 3221, 2969, 3161, 3053, 2611, 2538, 2354, 2296], 
    [407, 264, 265, 0, 157, 193, 277, 325, 441, 138, 503, 631, 557, 721, 779, 844, 737, 887, 921, 810, 1042, 958, 958, 1074, 679, 976, 825, 862, 1037, 954, 1181, 595, 723, 974, 1113, 1114, 1256, 810, 1128, 1119, 1341, 1245, 1289, 1530, 1383, 1459, 988, 1502, 1743, 1688, 901, 981, 1200, 1861, 2000, 1824, 1054, 1363, 2069, 2151, 2158, 1466, 1765, 1256, 2288, 2257, 1412, 2382, 2309, 2854, 2985, 2729, 2923, 2810, 2360, 2280, 2094, 2033], 
    [289, 157, 231, 157, 0, 349, 308, 478, 597, 289, 643, 783, 680, 860, 928, 958, 857, 1026, 1029, 920, 1170, 1060, 1073, 1186, 795, 1100, 929, 955, 1121, 1057, 1298, 709, 801, 1070, 1198, 1178, 1367, 863, 1207, 1215, 1424, 1314, 1347, 1578, 1480, 1557, 1021, 1577, 1765, 1747, 928, 969, 1213, 1869, 2041, 1870, 1046, 1367, 2055, 2149, 2186, 1494, 1758, 1241, 2287, 2284, 1392, 2391, 2328, 2859, 2994, 2743, 2935, 2828, 2393, 2327, 2149, 2098], 
    [590, 449, 416, 193, 349, 0, 375, 135, 249, 113, 329, 440, 409, 544, 588, 697, 585, 708, 782, 672, 874, 827, 810, 927, 536, 816, 695, 746, 926, 821, 1027, 459, 634, 850, 1001, 1028, 1107, 750, 1023, 993, 1227, 1151, 1207, 1457, 1250, 1325, 946, 1397, 1700, 1600, 871, 995, 1177, 1835, 1930, 1751, 1060, 1348, 2067, 2135, 2103, 1420, 1758, 1265, 2269, 2203, 1427, 2350, 2265, 2824, 2950, 2689, 2884, 2764, 2298, 2201, 2007, 1936], 
    [325, 241, 121, 277, 308, 375, 0, 494, 552, 261, 699, 775, 784, 907, 923, 1072, 960, 1066, 1156, 1046, 1242, 1200, 1184, 1302, 910, 1188, 1067, 1114, 1293, 1194, 1401, 831, 988, 1222, 1368, 1381, 1481, 1083, 1387, 1365, 1596, 1510, 1558, 1802, 1624, 1699, 1264, 1762, 2020, 1956, 1178, 1252, 1476, 2138, 2273, 2096, 1326, 1638, 2341, 2426, 2433, 1743, 2039, 1527, 2564, 2533, 1681, 2659, 2586, 3130, 3261, 3006, 3199, 3086, 2635, 2551, 2362, 2297], 
    [725, 583, 548, 325, 478, 135, 494, 0, 140, 239, 206, 306, 307, 414, 454, 587, 473, 576, 675, 568, 748, 726, 696, 814, 432, 695, 596, 656, 838, 718, 908, 364, 569, 754, 910, 956, 991, 702, 937, 893, 1133, 1071, 1135, 1389, 1144, 1217, 906, 1307, 1651, 1521, 841, 993, 1147, 1795, 1861, 1680, 1051, 1321, 2043, 2100, 2043, 1369, 1731, 1256, 2232, 2144, 1419, 2305, 2212, 2778, 2900, 2637, 2832, 2707, 2232, 2125, 1926, 1848], 
    [820, 683, 627, 441, 597, 249, 552, 140, 0, 326, 227, 226, 354, 382, 372, 599, 489, 528, 691, 593, 717, 749, 698, 813, 465, 679, 629, 700, 879, 740, 894, 418, 645, 784, 945, 1014, 981, 790, 978, 914, 1160, 1118, 1191, 1447, 1151, 1221, 997, 1339, 1725, 1565, 940, 1109, 1242, 1878, 1915, 1733, 1162, 1417, 2139, 2187, 2106, 1445, 1826, 1365, 2316, 2207, 1528, 2381, 2281, 2852, 2970, 2706, 2901, 2772, 2288, 2169, 1966, 1879], 
    [494, 357, 309, 138, 289, 113, 261, 239, 326, 0, 440, 537, 522, 652, 686, 810, 699, 815, 895, 785, 985, 940, 923, 1041, 649, 929, 807, 856, 1036, 934, 1140, 571, 738, 962, 1111, 1133, 1220, 846, 1132, 1105, 1338, 1258, 1312, 1560, 1363, 1438, 1038, 1506, 1794, 1707, 958, 1064, 1263, 1923, 2032, 1854, 1133, 1431, 2146, 2219, 2201, 1514, 1838, 1338, 2355, 2301, 1497, 2441, 2360, 2914, 3041, 2783, 2977, 2859, 2398, 2306, 2113, 2044], 
    [910, 767, 745, 503, 643, 329, 699, 206, 227, 440, 0, 185, 128, 218, 304, 384, 271, 384, 475, 372, 545, 529, 492, 609, 240, 489, 405, 473, 653, 521, 703, 192, 424, 561, 721, 787, 786, 573, 753, 696, 939, 891, 964, 1219, 942, 1014, 780, 1116, 1500, 1339, 731, 919, 1028, 1655, 1688, 1506, 966, 1202, 1922, 1966, 1878, 1221, 1610, 1163, 2094, 1979, 1326, 2155, 2054, 2626, 2744, 2479, 2674, 2545, 2061, 1944, 1742, 1658], 
    [1029, 888, 844, 631, 783, 440, 775, 306, 226, 537, 185, 0, 278, 180, 149, 426, 331, 305, 517, 438, 500, 581, 508, 617, 338, 473, 481, 562, 727, 570, 684, 333, 563, 623, 785, 883, 775, 718, 825, 738, 984, 968, 1051, 1305, 955, 1022, 920, 1165, 1606, 1403, 883, 1086, 1167, 1772, 1763, 1582, 1126, 1341, 2053, 2084, 1965, 1332, 1742, 1319, 2208, 2065, 1479, 2258, 2149, 2725, 2837, 2571, 2765, 2630, 2137, 2004, 1796, 1701], 
    [961, 818, 815, 557, 680, 409, 784, 307, 354, 522, 128, 278, 0, 216, 354, 289, 179, 368, 373, 264, 490, 420, 403, 520, 127, 420, 290, 352, 533, 413, 624, 64, 297, 447, 604, 661, 700, 449, 632, 587, 826, 769, 839, 1094, 842, 916, 655, 1001, 1372, 1218, 610, 808, 903, 1528, 1564, 1382, 850, 1077, 1796, 1838, 1752, 1093, 1484, 1044, 1966, 1853, 1206, 2027, 1927, 2499, 2617, 2352, 2547, 2418, 1936, 1823, 1622, 1542], 
    [1128, 985, 960, 721, 860, 544, 907, 414, 382, 652, 218, 180, 216, 0, 160, 249, 169, 166, 338, 269, 337, 403, 328, 438, 202, 298, 314, 398, 554, 393, 512, 241, 437, 447, 608, 715, 601, 589, 649, 558, 804, 793, 879, 1131, 777, 844, 782, 985, 1439, 1224, 759, 978, 1026, 1609, 1586, 1405, 1009, 1196, 1899, 1923, 1790, 1169, 1590, 1192, 2044, 1890, 1348, 2089, 1976, 2553, 2664, 2397, 2591, 2455, 1959, 1824, 1616, 1520], 
    [1178, 1037, 993, 779, 928, 588, 923, 454, 372, 686, 304, 149, 354, 160, 0, 390, 327, 191, 470, 419, 389, 537, 442, 536, 362, 385, 465, 549, 693, 525, 583, 392, 596, 584, 739, 861, 675, 749, 784, 677, 918, 927, 1018, 1265, 867, 928, 941, 1099, 1582, 1344, 918, 1137, 1183, 1756, 1710, 1531, 1169, 1352, 2051, 2069, 1921, 1316, 1744, 1351, 2189, 2020, 1508, 2227, 2110, 2689, 2795, 2529, 2721, 2582, 2083, 1938, 1727, 1624], 
    [1244, 1102, 1103, 844, 958, 697, 1072, 587, 599, 810, 384, 426, 289, 249, 390, 0, 113, 254, 92, 55, 247, 155, 115, 231, 165, 159, 91, 168, 305, 144, 340, 250, 286, 197, 358, 471, 412, 412, 400, 316, 562, 543, 631, 882, 557, 631, 576, 743, 1193, 977, 576, 811, 809, 1366, 1337, 1156, 827, 973, 1663, 1680, 1541, 927, 1357, 992, 1799, 1641, 1142, 1841, 1726, 2304, 2414, 2148, 2341, 2205, 1711, 1579, 1373, 1282], 
    [1140, 997, 994, 737, 857, 585, 960, 473, 489, 699, 271, 331, 179, 169, 327, 113, 0, 247, 203, 108, 320, 261, 224, 342, 69, 243, 150, 231, 398, 251, 445, 152, 278, 297, 460, 552, 522, 426, 497, 426, 671, 639, 721, 975, 671, 744, 614, 850, 1275, 1080, 595, 821, 857, 1443, 1436, 1255, 847, 1027, 1730, 1756, 1635, 1003, 1421, 1026, 1879, 1736, 1181, 1927, 1818, 2394, 2507, 2241, 2435, 2301, 1810, 1684, 1479, 1391], 
    [1294, 1151, 1124, 887, 1026, 708, 1066, 576, 528, 815, 384, 305, 368, 166, 191, 254, 247, 0, 314, 300, 200, 378, 269, 351, 308, 200, 343, 422, 535, 366, 392, 375, 519, 427, 571, 710, 485, 659, 620, 500, 735, 760, 855, 1096, 678, 738, 830, 915, 1421, 1163, 825, 1058, 1062, 1601, 1531, 1354, 1077, 1225, 1905, 1913, 1745, 1164, 1602, 1246, 2028, 1844, 1396, 2059, 1937, 2516, 2620, 2353, 2545, 2404, 1902, 1752, 1541, 1435], 
    [1317, 1176, 1183, 921, 1029, 782, 1156, 675, 691, 895, 475, 517, 373, 338, 470, 92, 203, 314, 0, 111, 242, 67, 71, 158, 246, 156, 106, 138, 223, 55, 278, 327, 300, 114, 270, 396, 338, 397, 314, 223, 470, 457, 548, 796, 469, 544, 535, 650, 1113, 886, 549, 789, 756, 1289, 1247, 1067, 795, 915, 1591, 1603, 1453, 851, 1289, 948, 1720, 1553, 1093, 1757, 1640, 2219, 2327, 2061, 2254, 2117, 1621, 1488, 1281, 1189], 
    [1207, 1066, 1072, 810, 920, 672, 1046, 568, 593, 785, 372, 438, 264, 269, 419, 55, 108, 300, 111, 0, 302, 158, 157, 266, 136, 213, 46, 130, 290, 150, 381, 216, 231, 191, 353, 447, 447, 360, 389, 325, 568, 531, 614, 867, 578, 653, 531, 745, 1171, 973, 526, 760, 768, 1340, 1329, 1147, 777, 935, 1632, 1654, 1528, 900, 1324, 947, 1775, 1628, 1099, 1821, 1711, 2288, 2400, 2133, 2327, 2194, 1702, 1577, 1373, 1286], 
    [1448, 1305, 1290, 1042, 1170, 874, 1242, 748, 717, 985, 545, 500, 490, 337, 389, 247, 320, 200, 242, 302, 0, 285, 172, 187, 387, 90, 327, 379, 424, 275, 195, 472, 529, 329, 436, 598, 287, 639, 488, 349, 562, 617, 717, 942, 485, 542, 772, 737, 1278, 988, 791, 1031, 981, 1464, 1358, 1184, 1035, 1131, 1779, 1773, 1578, 1036, 1486, 1181, 1882, 1675, 1320, 1902, 1773, 2351, 2450, 2184, 2373, 2230, 1725, 1568, 1355, 1245], 
    [1349, 1209, 1222, 958, 1060, 827, 1200, 726, 749, 940, 529, 581, 420, 403, 537, 155, 261, 378, 67, 158, 285, 0, 117, 153, 293, 206, 133, 121, 158, 12, 275, 369, 297, 49, 204, 332, 319, 369, 248, 167, 411, 391, 481, 729, 425, 501, 487, 590, 1046, 822, 511, 750, 700, 1224, 1182, 1002, 751, 855, 1527, 1537, 1387, 786, 1225, 897, 1654, 1487, 1038, 1691, 1574, 2153, 2261, 1995, 2188, 2051, 1556, 1425, 1219, 1130], 
    [1359, 1217, 1217, 958, 1073, 810, 1184, 696, 698, 923, 492, 508, 403, 328, 442, 115, 224, 269, 71, 157, 172, 117, 0, 118, 280, 89, 168, 208, 270, 106, 225, 365, 368, 165, 302, 446, 298, 468, 351, 235, 479, 490, 585, 827, 453, 524, 601, 660, 1152, 903, 619, 858, 817, 1332, 1269, 1089, 864, 973, 1639, 1644, 1480, 897, 1340, 1013, 1759, 1578, 1155, 1790, 1670, 2249, 2354, 2087, 2280, 2140, 1641, 1500, 1290, 1193], 
    [1472, 1331, 1334, 1074, 1186, 927, 1302, 814, 813, 1041, 609, 617, 520, 438, 536, 231, 342, 351, 158, 266, 187, 153, 118, 0, 395, 151, 263, 274, 252, 149, 122, 479, 448, 181, 252, 419, 182, 520, 305, 162, 385, 430, 530, 756, 339, 408, 619, 564, 1091, 813, 654, 892, 811, 1277, 1181, 1005, 886, 955, 1593, 1587, 1398, 850, 1301, 1017, 1696, 1496, 1149, 1718, 1592, 2170, 2272, 2005, 2196, 2054, 1551, 1402, 1191, 1088], 
    [1079, 937, 939, 679, 795, 536, 910, 432, 465, 649, 240, 338, 127, 202, 362, 165, 69, 308, 246, 136, 387, 293, 280, 395, 0, 309, 165, 235, 414, 286, 504, 86, 235, 322, 482, 553, 577, 389, 513, 460, 701, 653, 728, 983, 714, 789, 586, 878, 1273, 1099, 557, 776, 832, 1436, 1450, 1268, 807, 1004, 1715, 1748, 1644, 997, 1404, 992, 1873, 1744, 1150, 1928, 1822, 2397, 2512, 2247, 2441, 2310, 1823, 1704, 1502, 1419], 
    [1381, 1238, 1230, 976, 1100, 816, 1188, 695, 679, 929, 489, 473, 420, 298, 385, 159, 243, 200, 156, 213, 90, 206, 89, 151, 309, 0, 237, 291, 355, 195, 215, 395, 440, 253, 380, 531, 303, 550, 430, 302, 535, 566, 664, 899, 484, 549, 690, 715, 1229, 963, 705, 944, 906, 1412, 1331, 1154, 951, 1060, 1722, 1723, 1546, 978, 1424, 1102, 1836, 1644, 1244, 1862, 1738, 2318, 2420, 2154, 2345, 2204, 1702, 1553, 1342, 1238], 
    [1217, 1077, 1088, 825, 929, 695, 1067, 596, 629, 807, 405, 481, 290, 314, 465, 91, 150, 343, 106, 46, 327, 133, 168, 263, 165, 237, 0, 84, 251, 129, 383, 236, 203, 157, 316, 402, 442, 321, 350, 298, 536, 491, 571, 826, 558, 634, 487, 712, 1126, 936, 484, 720, 723, 1295, 1289, 1107, 736, 889, 1586, 1608, 1486, 855, 1278, 902, 1730, 1587, 1054, 1778, 1668, 2245, 2357, 2091, 2285, 2152, 1663, 1540, 1337, 1254], 
    [1244, 1107, 1127, 862, 955, 746, 1114, 656, 700, 856, 473, 562, 352, 398, 549, 168, 231, 422, 138, 130, 379, 121, 208, 274, 235, 291, 84, 0, 182, 124, 396, 292, 176, 116, 255, 321, 438, 260, 281, 260, 482, 418, 493, 749, 525, 603, 408, 652, 1044, 867, 415, 653, 641, 1212, 1215, 1034, 663, 806, 1502, 1525, 1409, 772, 1194, 824, 1647, 1510, 974, 1697, 1589, 2165, 2279, 2013, 2207, 2075, 1588, 1471, 1271, 1192], 
    [1410, 1275, 1301, 1037, 1121, 926, 1293, 838, 879, 1036, 653, 727, 533, 554, 693, 305, 398, 535, 223, 290, 424, 158, 270, 252, 414, 355, 251, 182, 0, 169, 349, 474, 321, 109, 77, 176, 352, 321, 100, 131, 304, 241, 326, 578, 376, 452, 373, 470, 890, 686, 421, 653, 560, 1066, 1038, 857, 640, 708, 1370, 1379, 1238, 628, 1070, 765, 1497, 1338, 898, 1536, 1422, 2000, 2110, 1844, 2038, 1903, 1412, 1291, 1089, 1010], 
    [1345, 1206, 1217, 954, 1057, 821, 1194, 718, 740, 934, 521, 570, 413, 393, 525, 144, 251, 366, 55, 150, 275, 12, 106, 149, 286, 195, 129, 124, 169, 0, 271, 363, 299, 61, 215, 344, 319, 376, 259, 175, 420, 402, 493, 741, 430, 506, 497, 599, 1058, 833, 520, 759, 711, 1236, 1193, 1013, 761, 867, 1539, 1549, 1399, 798, 1237, 907, 1665, 1498, 1049, 1702, 1586, 2164, 2273, 2006, 2199, 2062, 1567, 1435, 1229, 1139], 
    [1583, 1441, 1438, 1181, 1298, 1027, 1401, 908, 894, 1140, 703, 684, 624, 512, 583, 340, 445, 392, 278, 381, 195, 275, 225, 122, 504, 215, 383, 396, 349, 271, 0, 590, 570, 297, 327, 500, 93, 638, 377, 231, 389, 479, 580, 782, 293, 347, 722, 555, 1124, 808, 765, 1000, 898, 1315, 1177, 1006, 989, 1030, 1638, 1619, 1400, 901, 1355, 1108, 1722, 1495, 1233, 1732, 1598, 2174, 2269, 2004, 2192, 2046, 1540, 1378, 1164, 1052], 
    [994, 852, 856, 595, 709, 459, 831, 364, 418, 571, 192, 333, 64, 241, 392, 250, 152, 375, 327, 216, 472, 369, 365, 479, 86, 395, 236, 292, 474, 363, 590, 0, 235, 392, 546, 598, 661, 387, 572, 534, 770, 708, 776, 1031, 793, 869, 593, 943, 1308, 1157, 551, 754, 841, 1463, 1501, 1320, 793, 1015, 1733, 1774, 1689, 1029, 1421, 986, 1902, 1790, 1147, 1963, 1863, 2434, 2553, 2288, 2483, 2355, 1873, 1762, 1562, 1484], 
    [1089, 956, 987, 723, 801, 634, 988, 569, 645, 738, 424, 563, 297, 437, 596, 286, 278, 519, 300, 231, 529, 297, 368, 448, 235, 440, 203, 176, 321, 299, 570, 235, 0, 289, 398, 395, 615, 155, 406, 426, 623, 522, 574, 824, 690, 767, 358, 779, 1082, 969, 323, 543, 606, 1233, 1297, 1117, 572, 780, 1499, 1542, 1474, 802, 1186, 758, 1671, 1575, 917, 1737, 1643, 2210, 2331, 2068, 2263, 2138, 1665, 1568, 1376, 1310], 
    [1359, 1222, 1239, 974, 1070, 850, 1222, 754, 784, 962, 561, 623, 447, 447, 584, 197, 297, 427, 114, 191, 329, 49, 165, 181, 322, 253, 157, 116, 109, 61, 297, 392, 289, 0, 163, 283, 328, 341, 203, 145, 379, 346, 434, 684, 410, 487, 445, 555, 999, 783, 474, 713, 653, 1175, 1141, 959, 710, 807, 1478, 1488, 1343, 737, 1176, 851, 1606, 1443, 991, 1644, 1529, 2107, 2217, 1950, 2144, 2008, 1514, 1387, 1182, 1097], 
    [1487, 1352, 1378, 1113, 1198, 1001, 1368, 910, 945, 1111, 721, 785, 604, 608, 739, 358, 460, 571, 270, 353, 436, 204, 302, 252, 482, 380, 316, 255, 77, 215, 327, 546, 398, 163, 0, 173, 311, 388, 52, 96, 228, 189, 284, 527, 304, 379, 411, 397, 850, 620, 471, 694, 571, 1032, 979, 798, 674, 706, 1344, 1344, 1183, 600, 1049, 781, 1457, 1283, 906, 1489, 1371, 1950, 2058, 1791, 1984, 1847, 1352, 1224, 1021, 938], 
    [1462, 1335, 1376, 1114, 1178, 1028, 1381, 956, 1014, 1133, 787, 883, 661, 715, 861, 471, 552, 710, 396, 447, 598, 332, 446, 419, 553, 531, 402, 321, 176, 344, 500, 598, 395, 283, 173, 0, 480, 318, 125, 269, 294, 140, 179, 433, 428, 493, 262, 407, 724, 575, 342, 542, 398, 895, 905, 724, 513, 535, 1195, 1209, 1091, 456, 894, 609, 1329, 1192, 733, 1376, 1269, 1844, 1959, 1693, 1888, 1758, 1276, 1173, 981, 921], 
    [1654, 1513, 1515, 1256, 1367, 1107, 1481, 991, 981, 1220, 786, 775, 700, 601, 675, 412, 522, 485, 338, 447, 287, 319, 298, 182, 577, 303, 442, 438, 352, 319, 93, 661, 615, 328, 311, 480, 0, 663, 355, 222, 319, 434, 532, 715, 204, 255, 720, 474, 1058, 726, 774, 1003, 875, 1251, 1094, 926, 985, 996, 1578, 1552, 1320, 849, 1303, 1088, 1651, 1414, 1204, 1655, 1518, 2093, 2186, 1921, 2108, 1961, 1455, 1289, 1075, 961], 
    [1145, 1021, 1068, 810, 863, 750, 1083, 702, 790, 846, 573, 718, 449, 589, 749, 412, 426, 659, 397, 360, 639, 369, 468, 520, 389, 550, 321, 260, 321, 376, 638, 387, 155, 341, 388, 318, 663, 0, 377, 449, 593, 458, 484, 720, 693, 767, 207, 724, 951, 884, 169, 399, 454, 1093, 1190, 1014, 421, 629, 1350, 1399, 1355, 670, 1037, 603, 1530, 1455, 762, 1604, 1516, 2077, 2201, 1940, 2135, 2014, 1552, 1470, 1287, 1235], 
    [1495, 1362, 1392, 1128, 1207, 1023, 1387, 937, 978, 1132, 753, 825, 632, 649, 784, 400, 497, 620, 314, 389, 488, 248, 351, 305, 513, 430, 350, 281, 100, 259, 377, 572, 406, 203, 52, 125, 355, 377, 0, 147, 219, 143, 235, 482, 322, 394, 374, 375, 801, 586, 442, 658, 522, 982, 940, 758, 633, 654, 1292, 1294, 1141, 548, 997, 734, 1408, 1241, 856, 1443, 1327, 1905, 2014, 1748, 1941, 1806, 1313, 1191, 990, 913], 
    [1504, 1366, 1383, 1119, 1215, 993, 1365, 893, 914, 1105, 696, 738, 587, 558, 677, 316, 426, 500, 223, 325, 349, 167, 235, 162, 460, 302, 298, 260, 131, 175, 231, 534, 426, 145, 96, 269, 222, 449, 147, 0, 247, 268, 368, 597, 266, 343, 498, 428, 929, 668, 551, 780, 667, 1115, 1034, 855, 764, 801, 1431, 1425, 1246, 688, 1140, 877, 1535, 1344, 1002, 1560, 1437, 2016, 2120, 1853, 2045, 1906, 1406, 1267, 1059, 966], 
    [1713, 1579, 1606, 1341, 1424, 1227, 1596, 1133, 1160, 1338, 939, 984, 826, 804, 918, 562, 671, 735, 470, 568, 562, 411, 479, 385, 701, 535, 536, 482, 304, 420, 389, 770, 623, 379, 228, 294, 319, 593, 219, 247, 0, 173, 246, 396, 164, 210, 553, 181, 740, 428, 635, 827, 631, 933, 797, 622, 787, 720, 1261, 1233, 1016, 542, 992, 843, 1334, 1113, 936, 1343, 1212, 1789, 1888, 1622, 1812, 1670, 1167, 1021, 812, 719], 
    [1599, 1471, 1508, 1245, 1314, 1151, 1510, 1071, 1118, 1258, 891, 968, 769, 793, 927, 543, 639, 760, 457, 531, 617, 391, 490, 430, 653, 566, 491, 418, 241, 402, 479, 708, 522, 346, 189, 140, 434, 458, 143, 268, 173, 0, 101, 339, 328, 382, 386, 267, 663, 450, 474, 655, 462, 848, 798, 616, 614, 565, 1164, 1158, 998, 423, 877, 675, 1270, 1098, 778, 1301, 1183, 1762, 1871, 1604, 1798, 1663, 1171, 1054, 857, 788], 
    [1629, 1505, 1550, 1289, 1347, 1207, 1558, 1135, 1191, 1312, 964, 1051, 839, 879, 1018, 631, 721, 855, 548, 614, 717, 481, 585, 530, 728, 664, 571, 493, 326, 493, 580, 776, 574, 434, 284, 179, 532, 484, 235, 368, 246, 101, 0, 255, 409, 453, 368, 274, 566, 400, 464, 615, 390, 748, 726, 545, 564, 475, 1063, 1060, 916, 321, 775, 599, 1174, 1017, 690, 1210, 1097, 1674, 1786, 1520, 1714, 1582, 1097, 994, 805, 751], 
    [1854, 1735, 1788, 1530, 1578, 1457, 1802, 1389, 1447, 1560, 1219, 1305, 1094, 1131, 1265, 882, 975, 1096, 796, 867, 942, 729, 827, 756, 983, 899, 826, 749, 578, 741, 782, 1031, 824, 684, 527, 433, 715, 720, 482, 597, 396, 339, 255, 0, 541, 550, 564, 281, 344, 200, 662, 747, 468, 538, 473, 294, 678, 456, 868, 838, 661, 211, 615, 632, 941, 761, 663, 964, 845, 1423, 1533, 1266, 1460, 1327, 843, 750, 574, 548], 
    [1770, 1632, 1646, 1383, 1480, 1250, 1624, 1144, 1151, 1363, 942, 955, 842, 777, 867, 557, 671, 678, 469, 578, 485, 425, 453, 339, 714, 484, 558, 525, 376, 430, 293, 793, 690, 410, 304, 428, 204, 693, 322, 266, 164, 328, 409, 541, 0, 77, 689, 278, 883, 528, 763, 970, 790, 1077, 893, 728, 936, 884, 1409, 1370, 1120, 702, 1148, 1003, 1464, 1213, 1099, 1460, 1320, 1893, 1984, 1719, 1905, 1758, 1251, 1085, 872, 760], 
    [1847, 1709, 1723, 1459, 1557, 1325, 1699, 1217, 1221, 1438, 1014, 1022, 916, 844, 928, 631, 744, 738, 544, 653, 542, 501, 524, 408, 789, 549, 634, 603, 452, 506, 347, 869, 767, 487, 379, 493, 255, 767, 394, 343, 210, 382, 453, 550, 77, 0, 755, 273, 886, 508, 832, 1033, 840, 1081, 865, 709, 996, 923, 1414, 1366, 1096, 727, 1164, 1052, 1454, 1186, 1140, 1440, 1297, 1864, 1951, 1688, 1872, 1723, 1216, 1041, 828, 709], 
    [1293, 1178, 1238, 988, 1021, 946, 1264, 906, 997, 1038, 780, 920, 655, 782, 941, 576, 614, 830, 535, 531, 772, 487, 601, 619, 586, 690, 487, 408, 373, 497, 722, 593, 358, 445, 411, 262, 720, 207, 374, 498, 553, 386, 368, 564, 689, 755, 0, 639, 757, 748, 98, 284, 248, 890, 1020, 851, 268, 422, 1142, 1194, 1169, 478, 830, 416, 1326, 1269, 568, 1404, 1323, 1878, 2004, 1745, 1939, 1823, 1373, 1308, 1138, 1104], 
    [1863, 1733, 1766, 1502, 1577, 1397, 1762, 1307, 1339, 1506, 1116, 1165, 1001, 985, 1099, 743, 850, 915, 650, 745, 737, 590, 660, 564, 878, 715, 712, 652, 470, 599, 555, 943, 779, 555, 397, 407, 474, 724, 375, 428, 181, 267, 274, 281, 278, 273, 639, 0, 613, 253, 732, 888, 648, 808, 622, 452, 835, 694, 1141, 1094, 846, 473, 896, 847, 1186, 941, 911, 1182, 1045, 1620, 1715, 1449, 1638, 1493, 989, 840, 631, 541], 
    [2023, 1919, 1988, 1743, 1765, 1700, 2020, 1651, 1725, 1794, 1500, 1606, 1372, 1439, 1582, 1193, 1275, 1421, 1113, 1171, 1278, 1046, 1152, 1091, 1273, 1229, 1126, 1044, 890, 1058, 1124, 1308, 1082, 999, 850, 724, 1058, 951, 801, 929, 740, 663, 566, 344, 883, 886, 757, 613, 0, 417, 842, 829, 555, 195, 357, 291, 749, 429, 528, 496, 426, 281, 319, 609, 607, 520, 551, 655, 566, 1127, 1250, 989, 1183, 1067, 641, 642, 555, 613], 
    [2028, 1904, 1949, 1688, 1747, 1600, 1956, 1521, 1565, 1707, 1339, 1403, 1218, 1224, 1344, 977, 1080, 1163, 886, 973, 988, 822, 903, 813, 1099, 963, 936, 867, 686, 833, 808, 1157, 969, 783, 620, 575, 726, 884, 586, 668, 428, 450, 400, 200, 528, 508, 748, 253, 417, 0, 846, 946, 668, 604, 370, 201, 877, 647, 935, 867, 593, 399, 730, 828, 947, 688, 846, 933, 793, 1367, 1462, 1196, 1385, 1242, 739, 605, 407, 356], 
    [1197, 1084, 1147, 901, 928, 871, 1178, 841, 940, 958, 731, 883, 610, 759, 918, 576, 595, 825, 549, 526, 791, 511, 619, 654, 557, 705, 484, 415, 421, 520, 765, 551, 323, 474, 471, 342, 774, 169, 442, 551, 635, 474, 464, 662, 763, 832, 98, 732, 842, 846, 0, 239, 307, 965, 1115, 947, 252, 480, 1203, 1264, 1259, 567, 891, 436, 1399, 1357, 596, 1484, 1408, 1957, 2085, 1828, 2022, 1908, 1465, 1404, 1236, 1202], 
    [1207, 1115, 1199, 981, 969, 995, 1252, 993, 1109, 1064, 919, 1086, 808, 978, 1137, 811, 821, 1058, 789, 760, 1031, 750, 858, 892, 776, 944, 720, 653, 653, 759, 1000, 754, 543, 713, 694, 542, 1003, 399, 658, 780, 827, 655, 615, 747, 970, 1033, 284, 888, 829, 946, 239, 0, 287, 908, 1150, 1002, 81, 407, 1089, 1180, 1255, 591, 789, 275, 1319, 1348, 433, 1428, 1376, 1893, 2029, 1783, 1972, 1873, 1470, 1446, 1303, 1294], 
    [1468, 1365, 1438, 1200, 1213, 1177, 1476, 1147, 1242, 1263, 1028, 1167, 903, 1026, 1183, 809, 857, 1062, 756, 768, 981, 700, 817, 811, 832, 906, 723, 641, 560, 711, 898, 841, 606, 653, 571, 398, 875, 454, 522, 667, 631, 462, 390, 468, 790, 840, 248, 648, 555, 668, 307, 287, 0, 662, 865, 715, 212, 175, 897, 958, 980, 304, 585, 214, 1092, 1076, 339, 1182, 1115, 1654, 1785, 1531, 1724, 1615, 1193, 1160, 1016, 1011], 
    [2115, 2019, 2097, 1861, 1869, 1835, 2138, 1795, 1878, 1923, 1655, 1772, 1528, 1609, 1756, 1366, 1443, 1601, 1289, 1340, 1464, 1224, 1332, 1277, 1436, 1412, 1295, 1212, 1066, 1236, 1315, 1463, 1233, 1175, 1032, 895, 1251, 1093, 982, 1115, 933, 848, 748, 538, 1077, 1081, 890, 808, 195, 604, 965, 908, 662, 0, 444, 449, 828, 503, 334, 313, 403, 440, 198, 654, 438, 475, 549, 522, 475, 993, 1125, 875, 1066, 966, 615, 682, 655, 743], 
    [2312, 2198, 2255, 2000, 2041, 1930, 2273, 1861, 1915, 2032, 1688, 1763, 1564, 1586, 1710, 1337, 1436, 1531, 1247, 1329, 1358, 1182, 1269, 1181, 1450, 1331, 1289, 1215, 1038, 1193, 1177, 1501, 1297, 1141, 979, 905, 1094, 1190, 940, 1034, 797, 798, 726, 473, 893, 865, 1020, 622, 357, 370, 1115, 1150, 865, 444, 0, 182, 1072, 769, 715, 594, 232, 561, 633, 955, 637, 321, 907, 586, 434, 1000, 1093, 827, 1015, 873, 374, 295, 211, 314], 
    [2144, 2027, 2081, 1824, 1870, 1751, 2096, 1680, 1733, 1854, 1506, 1582, 1382, 1405, 1531, 1156, 1255, 1354, 1067, 1147, 1184, 1002, 1089, 1005, 1268, 1154, 1107, 1034, 857, 1013, 1006, 1320, 1117, 959, 798, 724, 926, 1014, 758, 855, 622, 616, 545, 294, 728, 709, 851, 452, 291, 201, 947, 1002, 715, 449, 182, 0, 927, 644, 767, 680, 394, 413, 608, 833, 752, 491, 811, 732, 592, 1168, 1267, 1000, 1191, 1051, 555, 458, 301, 328], 
    [1287, 1193, 1276, 1054, 1046, 1060, 1326, 1051, 1162, 1133, 966, 1126, 850, 1009, 1169, 827, 847, 1077, 795, 777, 1035, 751, 864, 886, 807, 951, 736, 663, 640, 761, 989, 793, 572, 710, 674, 513, 985, 421, 633, 764, 787, 614, 564, 678, 936, 996, 268, 835, 749, 877, 252, 81, 212, 828, 1072, 927, 0, 326, 1015, 1103, 1174, 514, 713, 205, 1241, 1267, 368, 1348, 1296, 1814, 1950, 1703, 1893, 1793, 1390, 1367, 1227, 1223], 
    [1613, 1516, 1594, 1363, 1367, 1348, 1638, 1321, 1417, 1431, 1202, 1341, 1077, 1196, 1352, 973, 1027, 1225, 915, 935, 1131, 855, 973, 955, 1004, 1060, 889, 806, 708, 867, 1030, 1015, 780, 807, 706, 535, 996, 629, 654, 801, 720, 565, 475, 456, 884, 923, 422, 694, 429, 647, 480, 407, 175, 503, 769, 644, 326, 0, 723, 789, 852, 249, 411, 189, 926, 943, 218, 1025, 969, 1493, 1627, 1378, 1569, 1467, 1068, 1062, 943, 962], 
    [2277, 2196, 2286, 2069, 2055, 2067, 2341, 2043, 2139, 2146, 1922, 2053, 1796, 1899, 2051, 1663, 1730, 1905, 1591, 1632, 1779, 1527, 1639, 1593, 1715, 1722, 1586, 1502, 1370, 1539, 1638, 1733, 1499, 1478, 1344, 1195, 1578, 1350, 1292, 1431, 1261, 1164, 1063, 868, 1409, 1414, 1142, 1141, 528, 935, 1203, 1089, 897, 334, 715, 767, 1015, 723, 0, 176, 574, 744, 312, 814, 287, 592, 665, 452, 515, 847, 993, 790, 954, 900, 730, 878, 917, 1029], 
    [2383, 2295, 2379, 2151, 2149, 2135, 2426, 2100, 2187, 2219, 1966, 2084, 1838, 1923, 2069, 1680, 1756, 1913, 1603, 1654, 1773, 1537, 1644, 1587, 1748, 1723, 1608, 1525, 1379, 1549, 1619, 1774, 1542, 1488, 1344, 1209, 1552, 1399, 1294, 1425, 1233, 1158, 1060, 838, 1370, 1366, 1194, 1094, 496, 867, 1264, 1180, 958, 313, 594, 680, 1103, 789, 176, 0, 420, 754, 393, 911, 139, 425, 775, 285, 340, 717, 859, 636, 811, 741, 559, 719, 783, 905], 
    [2447, 2340, 2406, 2158, 2186, 2103, 2433, 2043, 2106, 2201, 1878, 1965, 1752, 1790, 1921, 1541, 1635, 1745, 1453, 1528, 1578, 1387, 1480, 1398, 1644, 1546, 1486, 1409, 1238, 1399, 1400, 1689, 1474, 1343, 1183, 1091, 1320, 1355, 1141, 1246, 1016, 998, 916, 661, 1120, 1096, 1169, 846, 426, 593, 1259, 1255, 980, 403, 232, 394, 1174, 852, 574, 420, 0, 692, 598, 1025, 428, 101, 942, 355, 202, 774, 875, 608, 800, 666, 218, 304, 375, 510], 
    [1759, 1649, 1714, 1466, 1494, 1420, 1743, 1369, 1445, 1514, 1221, 1332, 1093, 1169, 1316, 927, 1003, 1164, 851, 900, 1036, 786, 897, 850, 997, 978, 855, 772, 628, 798, 901, 1029, 802, 737, 600, 456, 849, 670, 548, 688, 542, 423, 321, 211, 702, 727, 478, 473, 281, 399, 567, 591, 304, 440, 561, 413, 514, 249, 744, 754, 692, 0, 454, 432, 876, 791, 452, 936, 846, 1408, 1531, 1270, 1464, 1345, 899, 856, 714, 720], 
    [1990, 1903, 1988, 1765, 1758, 1758, 2039, 1731, 1826, 1838, 1610, 1742, 1484, 1590, 1744, 1357, 1421, 1602, 1289, 1324, 1486, 1225, 1340, 1301, 1404, 1424, 1278, 1194, 1070, 1237, 1355, 1421, 1186, 1176, 1049, 894, 1303, 1037, 997, 1140, 992, 877, 775, 615, 1148, 1164, 830, 896, 319, 730, 891, 789, 585, 198, 633, 608, 713, 411, 312, 393, 598, 454, 0, 518, 532, 663, 386, 657, 645, 1109, 1249, 1015, 1198, 1115, 806, 880, 844, 922], 
    [1472, 1385, 1472, 1256, 1241, 1265, 1527, 1256, 1365, 1338, 1163, 1319, 1044, 1192, 1351, 992, 1026, 1246, 948, 947, 1181, 897, 1013, 1017, 992, 1102, 902, 824, 765, 907, 1108, 986, 758, 851, 781, 609, 1088, 603, 734, 877, 843, 675, 599, 632, 1003, 1052, 416, 847, 609, 828, 436, 275, 214, 654, 955, 833, 205, 189, 814, 911, 1025, 432, 518, 0, 1050, 1112, 163, 1166, 1128, 1626, 1765, 1524, 1711, 1618, 1243, 1248, 1132, 1150], 
    [2522, 2434, 2517, 2288, 2287, 2269, 2564, 2232, 2316, 2355, 2094, 2208, 1966, 2044, 2189, 1799, 1879, 2028, 1720, 1775, 1882, 1654, 1759, 1696, 1873, 1836, 1730, 1647, 1497, 1665, 1722, 1902, 1671, 1606, 1457, 1329, 1651, 1530, 1408, 1535, 1334, 1270, 1174, 941, 1464, 1454, 1326, 1186, 607, 947, 1399, 1319, 1092, 438, 637, 752, 1241, 926, 287, 139, 428, 876, 532, 1050, 0, 400, 914, 173, 285, 578, 720, 504, 675, 613, 513, 704, 804, 936], 
    [2544, 2438, 2505, 2257, 2284, 2203, 2533, 2144, 2207, 2301, 1979, 2065, 1853, 1890, 2020, 1641, 1736, 1844, 1553, 1628, 1675, 1487, 1578, 1496, 1744, 1644, 1587, 1510, 1338, 1498, 1495, 1790, 1575, 1443, 1283, 1192, 1414, 1455, 1241, 1344, 1113, 1098, 1017, 761, 1213, 1186, 1269, 941, 520, 688, 1357, 1348, 1076, 475, 321, 491, 1267, 943, 592, 425, 101, 791, 663, 1112, 400, 0, 1021, 290, 129, 679, 776, 509, 701, 566, 144, 304, 428, 569], 
    [1613, 1532, 1623, 1412, 1392, 1427, 1681, 1419, 1528, 1497, 1326, 1479, 1206, 1348, 1508, 1142, 1181, 1396, 1093, 1099, 1320, 1038, 1155, 1149, 1150, 1244, 1054, 974, 898, 1049, 1233, 1147, 917, 991, 906, 733, 1204, 762, 856, 1002, 936, 778, 690, 663, 1099, 1140, 568, 911, 551, 846, 596, 433, 339, 549, 907, 811, 368, 218, 665, 775, 942, 452, 386, 163, 914, 1021, 0, 1042, 1021, 1493, 1634, 1401, 1584, 1500, 1158, 1190, 1099, 1137], 
    [2635, 2540, 2618, 2382, 2391, 2350, 2659, 2305, 2381, 2441, 2155, 2258, 2027, 2089, 2227, 1841, 1927, 2059, 1757, 1821, 1902, 1691, 1790, 1718, 1928, 1862, 1778, 1697, 1536, 1702, 1732, 1963, 1737, 1644, 1489, 1376, 1655, 1604, 1443, 1560, 1343, 1301, 1210, 964, 1460, 1440, 1404, 1182, 655, 933, 1484, 1428, 1182, 522, 586, 732, 1348, 1025, 452, 285, 355, 936, 657, 1166, 173, 290, 1042, 0, 162, 473, 603, 359, 545, 460, 372, 582, 718, 858], 
    [2581, 2480, 2552, 2309, 2328, 2265, 2586, 2212, 2281, 2360, 2054, 2149, 1927, 1976, 2110, 1726, 1818, 1937, 1640, 1711, 1773, 1574, 1670, 1592, 1822, 1738, 1668, 1589, 1422, 1586, 1598, 1863, 1643, 1529, 1371, 1269, 1518, 1516, 1327, 1437, 1212, 1183, 1097, 845, 1320, 1297, 1323, 1045, 566, 793, 1408, 1376, 1115, 475, 434, 592, 1296, 969, 515, 340, 202, 846, 645, 1128, 285, 129, 1021, 162, 0, 579, 690, 425, 620, 501, 228, 425, 556, 697], 
    [3098, 3007, 3088, 2854, 2859, 2824, 3130, 2778, 2852, 2914, 2626, 2725, 2499, 2553, 2689, 2304, 2394, 2516, 2219, 2288, 2351, 2153, 2249, 2170, 2397, 2318, 2245, 2165, 2000, 2164, 2174, 2434, 2210, 2107, 1950, 1844, 2093, 2077, 1905, 2016, 1789, 1762, 1674, 1423, 1893, 1864, 1878, 1620, 1127, 1367, 1957, 1893, 1654, 993, 1000, 1168, 1814, 1493, 847, 717, 774, 1408, 1109, 1626, 578, 679, 1493, 473, 579, 0, 147, 189, 139, 231, 664, 877, 1070, 1211], 
    [3236, 3143, 3221, 2985, 2994, 2950, 3261, 2900, 2970, 3041, 2744, 2837, 2617, 2664, 2795, 2414, 2507, 2620, 2327, 2400, 2450, 2261, 2354, 2272, 2512, 2420, 2357, 2279, 2110, 2273, 2269, 2553, 2331, 2217, 2058, 1959, 2186, 2201, 2014, 2120, 1888, 1871, 1786, 1533, 1984, 1951, 2004, 1715, 1250, 1462, 2085, 2029, 1785, 1125, 1093, 1267, 1950, 1627, 993, 859, 875, 1531, 1249, 1765, 720, 776, 1634, 603, 690, 147, 0, 267, 82, 239, 737, 936, 1140, 1277], 
    [2990, 2894, 2969, 2729, 2743, 2689, 3006, 2637, 2706, 2783, 2479, 2571, 2352, 2397, 2529, 2148, 2241, 2353, 2061, 2133, 2184, 1995, 2087, 2005, 2247, 2154, 2091, 2013, 1844, 2006, 2004, 2288, 2068, 1950, 1791, 1693, 1921, 1940, 1748, 1853, 1622, 1604, 1520, 1266, 1719, 1688, 1745, 1449, 989, 1196, 1828, 1783, 1531, 875, 827, 1000, 1703, 1378, 790, 636, 608, 1270, 1015, 1524, 504, 509, 1401, 359, 425, 189, 267, 0, 195, 115, 479, 690, 885, 1025], 
    [3180, 3085, 3161, 2923, 2935, 2884, 3199, 2832, 2901, 2977, 2674, 2765, 2547, 2591, 2721, 2341, 2435, 2545, 2254, 2327, 2373, 2188, 2280, 2196, 2441, 2345, 2285, 2207, 2038, 2199, 2192, 2483, 2263, 2144, 1984, 1888, 2108, 2135, 1941, 2045, 1812, 1798, 1714, 1460, 1905, 1872, 1939, 1638, 1183, 1385, 2022, 1972, 1724, 1066, 1015, 1191, 1893, 1569, 954, 811, 800, 1464, 1198, 1711, 675, 701, 1584, 545, 620, 139, 82, 195, 0, 157, 657, 854, 1059, 1196], 
    [3079, 2980, 3053, 2810, 2828, 2764, 3086, 2707, 2772, 2859, 2545, 2630, 2418, 2455, 2582, 2205, 2301, 2404, 2117, 2194, 2230, 2051, 2140, 2054, 2310, 2204, 2152, 2075, 1903, 2062, 2046, 2355, 2138, 2008, 1847, 1758, 1961, 2014, 1806, 1906, 1670, 1663, 1582, 1327, 1758, 1723, 1823, 1493, 1067, 1242, 1908, 1873, 1615, 966, 873, 1051, 1793, 1467, 900, 741, 666, 1345, 1115, 1618, 613, 566, 1500, 460, 501, 231, 239, 115, 157, 0, 507, 699, 905, 1041], 
    [2658, 2548, 2611, 2360, 2393, 2298, 2635, 2232, 2288, 2398, 2061, 2137, 1936, 1959, 2083, 1711, 1810, 1902, 1621, 1702, 1725, 1556, 1641, 1551, 1823, 1702, 1663, 1588, 1412, 1567, 1540, 1873, 1665, 1514, 1352, 1276, 1455, 1552, 1313, 1406, 1167, 1171, 1097, 843, 1251, 1216, 1373, 989, 641, 739, 1465, 1470, 1193, 615, 374, 555, 1390, 1068, 730, 559, 218, 899, 806, 1243, 513, 144, 1158, 372, 228, 664, 737, 479, 657, 507, 0, 223, 406, 547], 
    [2601, 2484, 2538, 2280, 2327, 2201, 2551, 2125, 2169, 2306, 1944, 2004, 1823, 1824, 1938, 1579, 1684, 1752, 1488, 1577, 1568, 1425, 1500, 1402, 1704, 1553, 1540, 1471, 1291, 1435, 1378, 1762, 1568, 1387, 1224, 1173, 1289, 1470, 1191, 1267, 1021, 1054, 994, 750, 1085, 1041, 1308, 840, 642, 605, 1404, 1446, 1160, 682, 295, 458, 1367, 1062, 878, 719, 304, 856, 880, 1248, 704, 304, 1190, 582, 425, 877, 936, 690, 854, 699, 223, 0, 214, 343], 
    [2427, 2306, 2354, 2094, 2149, 2007, 2362, 1926, 1966, 2113, 1742, 1796, 1622, 1616, 1727, 1373, 1479, 1541, 1281, 1373, 1355, 1219, 1290, 1191, 1502, 1342, 1337, 1271, 1089, 1229, 1164, 1562, 1376, 1182, 1021, 981, 1075, 1287, 990, 1059, 812, 857, 805, 574, 872, 828, 1138, 631, 555, 407, 1236, 1303, 1016, 655, 211, 301, 1227, 943, 917, 783, 375, 714, 844, 1132, 804, 428, 1099, 718, 556, 1070, 1140, 885, 1059, 905, 406, 214, 0, 142], 
    [2380, 2255, 2296, 2033, 2098, 1936, 2297, 1848, 1879, 2044, 1658, 1701, 1542, 1520, 1624, 1282, 1391, 1435, 1189, 1286, 1245, 1130, 1193, 1088, 1419, 1238, 1254, 1192, 1010, 1139, 1052, 1484, 1310, 1097, 938, 921, 961, 1235, 913, 966, 719, 788, 751, 548, 760, 709, 1104, 541, 613, 356, 1202, 1294, 1011, 743, 314, 328, 1223, 962, 1029, 905, 510, 720, 922, 1150, 936, 569, 1137, 858, 697, 1211, 1277, 1025, 1196, 1041, 547, 343, 142, 0]
]

names_unidireccional = [
    'CANCUN', 'VALLADOLID', 'FELIPE CARRILLO PUERTO', 'CAMPECHE', 'MERIDA','CIUDAD DEL CARMEN', 'CHETUMAL', 'VILLAHERMOSA', 'TUXTLA', 'FRANCISCO ESCARCEGA', 'ACAYUCAN', 'TEHUANTEPEC', 'ALVARADO', 'OAXACA', 'PUERTO ANGEL', 'IZUCAR DE MATAMOROS', 'TEHUACAN',
    'PINOTEPA NACIONAL', 'CUERNAVACA', 'PUEBLA', 'ACAPULCO', 'CIUDAD DE MEXICO', 'IGUALA', 'CIUDAD ALTAMIRANO', 'CORDOBA', 'CHILPANCINGO', 'TLAXCALA', 'PACHUCA DE SOTO', 'QUERETARO', 'TOLUCA DE LERDO', 'ZIHUATANEJO', 'VERACRUZ', 'TUXPAN DE RODRIGUEZ CANO',
    'ATLACOMULCO', 'SALAMANCA', 'SAN LUIS POTOSI', 'PLAYA AZUL', 'TAMPICO', 'GUANAJUATO', 'MORELIA', 'GUADALAJARA', 'AGUASCALIENTES', 'ZACATECAS', 'DURANGO', 'COLIMA', 'MANZANILLO', 'CIUDAD VICTORIA', 'TEPIC', 'HIDALGO DEL PARRAL', 'MAZATLAN', 'SOTO LA MARINA',
    'MATAMOROS', 'MONTERREY', 'CHIHUAHUA', 'TOPOLOBAMPO', 'CULIACAN', 'REYNOSA', 'MONCLOVA', 'CIUDAD JUAREZ', 'JANOS', 'CIUDAD OBREGON', 'TORREON', 'OJINAGA', 'NUEVO LAREDO', 'AGUA PRIETA', 'GUAYMAS', 'PIEDRAS NEGRAS', 'SANTA ANA', 'HERMOSILLO', 'MEXICALI',
    'TIJUANA', 'SAN FELIPE', 'ENSENADA', 'SAN QUINTIN', 'SANTA ROSALIA', 'SANTO DOMINGO', 'LA PAZ', 'CABO SAN LUCAS'
]

formed_graph = [
    [0,90,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#cancun
    [0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#valladolid
    [0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Felipe carrillo puerto
    [0,0,0,0,90,100,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#campeche
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#merida
    [0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#chetumal
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Francisco Escarcega
    [0,0,0,0,0,0,0,0,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Ciudad del Carmen
    [0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Villa Hermosa
    [0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Tuxtla
    [0,0,0,0,0,0,0,0,0,0,0,80,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Acayucan
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Tehuantepec
    [0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Alvarado
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Oaxaca
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Tehuacan
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Puerto Angel
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Izucar de Matamoros
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Pinotepa Nacional
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Acapulco
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Chilpancingo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Iguala
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Puebla
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Cordova
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Veracruz
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,100,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Cuernavaca
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,100,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100],#CDMX
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Ciudad Altamirano
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Zihuatanejo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,100,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Playa Azul
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Colima
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Manzanillo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Toluca
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Pachuca
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Queretaro
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Atlacomulco
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Tuxpan
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,100,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#San Luis
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Salamanca
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Morelia
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0],#Tampico
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Guanajuato
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Guadalajara
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Zacatecas
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Aguascalientes
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Tepic
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Mazatlan
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Culiacan
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Topolobampo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Ciudad Obregon
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Guaymas
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Hermosillo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,110,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Durango
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0],#Torreon
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Hidalgo del Parral
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Chihuahua
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Janos
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Agua Prieta
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Juarez
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Santa Ana
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Mexicalli
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#San Felipe
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Tijuana
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Ensenada
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0],#San quentin
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0],#Santa Rosalia
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0],#Santo domingo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0],#La Paz 
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Cabo San Lucas
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,80,0,0,0,80,0,0,0],#Ciudad Victoria
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,70,0,0],#Monterrey
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0],#Matamoros
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0],#Nuevo Laredo
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0],#Pidras Negras
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0],#Reynosa
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Soto la Marina
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0],#Monclova
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#Ojinaga
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]#Tlaxcala
]

names_formed_graph = [
    'CANCUN','VALLADOLID','FELIPE CARRILLO PUENTE','CAMPECHE','MERIDA','CHETUMAL',' FRANCISCO ESCARCEGA','CIUDAD DEL CARMEN','VILLA HERMOSA','TUXTLA','ACAYUCAN','TEHUANTEPEC','ALVARADO','OAXACA','TEHUACAN','PUERTO ANGEL',
    'IZUCAR DE MATAMOROS','PINOTEPA NACIONAL','ACAPULCO','CHILPANCINGO','IGUALA','PUEBLA','CORDOVA','VERACRUZ','CUERNAVACA','CIUDAD DE MÉXICO','CIUDAD ALTAMIRANO','ZIHUATANEJO','PLAYA AZUL','COLIMA','MANZANILLO','TOLUCA DE LERDO','PACHUCA DE SOTO','QUERETARO',
    'ATLACOMULCO','TUXPAN DE RODRIGUEZ CANO','SAN LUIS POTOSI','SALAMANCA','MORELIA','TAMPICO','GUANANJUATO','GUADALAJARA','ZACATECAS','AGUASCALIENTES','TEPIC','MAZATLAN','CULIACÁN','TOPOLOBAMPO ','CIUDAD OBREGÓN','GUAYMAS','HERMOSILLO','DURANGO','TORREÓN',
    'HIDALGO DEL PARRAL','CHIHUAHUA','JANOS','AGUA PRIETA','JUAREZ','SANTA ANA','MEXICALLI','SAN FELIPE','TIJUANA','ENSENADA','SAN QUINTIN','SANTA ROSALIA','SANTO DOMINGO','LA PAZ','CABO SAN LUCAS','CIUDAD VICTORIA','MONTERREY','MATAMOROS','NUEVO LAREDO',
    'PIEDRAS NEGRAS','REYNOSA','SOTO LA MARINA','MONCLOVA','OJINAGA','TLAXCALA'
]


###############################
###############################
##### Dependencias #####
import math 
import random
###############################
###############################
##### Variables Globales #####

# diccionario con el nombre de las ciudades contenidas en el grafo y sus correspondientes coordenadas
#   geograficas en formato de latitud y longitud
cities_coordinates = {
    'CANCUN': (21.1213285,-86.9192738)
    ,'VALLADOLID': (20.688114,-88.2204456)
    ,'FELIPE CARRILLO PUERTO': (19.5778903,-88.0630853)
    ,'CAMPECHE': (19.8305682,-90.5798365)
    ,'MERIDA': (20.9800512,-89.7029587)
    ,'CIUDAD DEL CARMEN': (18.6118375,-91.8927345)
    ,'CHETUMAL': (18.5221567,-88.3397982)
    ,'VILLAHERMOSA': (17.9925264,-92.9881407)
    ,'TUXTLA': (16.7459857,-93.1996103)
    ,'FRANCISCO ESCARCEGA': (18.6061556,-90.8176486)
    ,'ACAYUCAN': (17.951096,-94.9306961)
    ,'TEHUANTEPEC': (16.320636,-95.27521)
    ,'ALVARADO': (18.7760455,-95.7731952)
    ,'OAXACA': (17.0812951,-96.7707511)
    ,'PUERTO ANGEL': (15.6679974,-96.4933733)
    ,'IZUCAR DE MATAMOROS': (18.5980563,-98.5076767)
    ,'TEHUACAN': (18.462191,-97.4437333)
    ,'PINOTEPA NACIONAL': (16.3442895,-98.1315923)
    ,'CUERNAVACA': (18.9318685,-99.3106054)
    ,'PUEBLA': (19.040034,-98.2630056)
    ,'ACAPULCO': (16.8354485,-99.9323491)
    ,'CIUDAD DE MEXICO': (19.3898319,-99.7180148)
    ,'IGUALA': (18.3444,-99.5652232)
    ,'CIUDAD ALTAMIRANO': (18.3547491,-100.6817619)
    ,'CORDOBA': (18.8901707,-96.9751108)
    ,'CHILPANCINGO': (17.5477072,-99.5324349)
    ,'TLAXCALA': (19.4167798,-98.4471127)
    ,'PACHUCA DE SOTO': (20.0825056,-98.8268184)
    ,'QUERETARO': (20.6121228,-100.4802576)
    ,'TOLUCA DE LERDO': (19.294109,-99.6662331)
    ,'ZIHUATANEJO': (17.6405745,-101.5601369)
    ,'VERACRUZ': (19.1787635,-96.2113357)
    ,'TUXPAN DE RODRIGUEZ CANO': (20.9596561,-97.4158767)
    ,'ATLACOMULCO': (19.7980152,-99.89317)
    ,'SALAMANCA': (20.5664927,-101.2176511)
    ,'SAN LUIS POTOSI': (22.1127046,-101.0261099)
    ,'PLAYA AZUL': (17.9842581,-102.357616)
    ,'TAMPICO': (22.2662251,-97.939526)
    ,'GUANAJUATO': (21.0250928,-101.3296402)
    ,'MORELIA': (19.7036417,-101.2761644)
    ,'GUADALAJARA': (20.6737777,-103.4054536)
    ,'AGUASCALIENTES': (21.8857199,-102.36134)
    ,'ZACATECAS': (22.7636293,-102.623638)
    ,'DURANGO': (24.0226824,-104.7177652)
    ,'COLIMA': (19.2400444,-103.7636273)
    ,'MANZANILLO': (19.0775491,-104.4789574)
    ,'CIUDAD VICTORIA': (23.7409928,-99.1783576)
    ,'TEPIC': (21.5009822,-104.9119242)
    ,'HIDALGO DEL PARRAL': (26.9489283,-105.8211168)
    ,'MAZATLAN': (23.2467283,-106.4923175)
    ,'SOTO LA MARINA': (23.7673729,-98.2157573)
    ,'MATAMOROS': (25.8433787,-97.5849847)
    ,'MONTERREY': (25.6487281,-100.4431819)
    ,'CHIHUAHUA': (28.6708592,-106.2047036)
    ,'TOPOLOBAMPO': (25.6012747,-109.0687891)
    ,'CULIACAN': (24.8049008,-107.4933545)
    ,'REYNOSA': (26.0312262,-98.3662435)
    ,'MONCLOVA': (26.907775,-101.4940069)
    ,'CIUDAD JUAREZ': (31.6538179,-106.5890206)
    ,'JANOS': (30.8898127,-108.208458)
    ,'CIUDAD OBREGON': (27.4827355,-110.0844111)
    ,'TORREON': (25.548597,-103.4719562)
    ,'OJINAGA': (29.5453292,-104.4305246)
    ,'NUEVO LAREDO': (27.4530856,-99.6881218)
    ,'AGUA PRIETA': (31.3115272,-109.5855873)
    ,'GUAYMAS': (27.9272572,-110.9779564)
    ,'PIEDRAS NEGRAS': (28.6910517,-100.5801829)
    ,'SANTA ANA': (30.5345457,-111.1580567)
    ,'HERMOSILLO': (29.082137,-111.059027)
    ,'MEXICALI': (32.6137391,-115.5203312)
    ,'TIJUANA': (32.4966818,-117.087892)
    ,'SAN FELIPE': (31.009535,-114.8727296)
    ,'ENSENADA': (31.8423096,-116.6799816)
    ,'SAN QUINTIN': (30.5711324,-115.9588544)
    ,'SANTA ROSALIA': (27.3408761,-112.2825762)
    ,'SANTO DOMINGO': (25.3487297,-111.9975909)
    ,'LA PAZ': (24.1164209,-110.3727673)
    ,'CABO SAN LUCAS': (22.8962253,-109.9505077)
}

###############################
###############################
##### Funciones o Clases de Apoyo #####

# calcula la distancia haversine entre dos ciudades por medio de las coordenas geograficas
# entrada:
#   origin = tupla que contiene la latitud y longitud de la ciudad de origen
#   goal = tupla que contiene la latitud y longitud de la ciudad destino
# salida:
#   regresa el valor numerico de la distancia haversine redondeado
def haversine_distance_between_cities(origin,goal):
    constante_R = 6371
    lat1 = origin[0]*((math.pi)/180)
    lat2 = goal[0]*((math.pi)/180)
    distancia_latitudes = (goal[0]-origin[0])*((math.pi)/180)
    distancia_longitudes = (goal[1]-origin[1])*((math.pi)/180)
    aux_a = (math.sin(distancia_latitudes/2) * math.sin(distancia_latitudes/2)) + (math.cos(lat1) * math.cos(lat2) * (math.sin(distancia_longitudes/2) * math.sin(distancia_longitudes/2)))
    aux_c = 2 * math.atan2(math.sqrt(aux_a), math.sqrt(1-aux_a))
    distancia_haversine = constante_R * aux_c
    # calcula la distancia haversine entre dos ciudades y regresa su valor redondeado
    return round(distancia_haversine)

# Transforma las ciudades en las tuplas de latitud y longitud para poder calcular
# la distancia de haversine de manera mas comoda:
#   origin = nombre de la ciudad de origen
#   goal = nombre de la ciudad meta
# salida:
#   regresa el valor númerico de la distancia haversine redondeado
def haversine_heuristic(origin, goal):
    origin_coordinates = cities_coordinates[origin]
    goal_coordinates = cities_coordinates[goal]
    return haversine_distance_between_cities(origin_coordinates, goal_coordinates)
###############################
###############################
##### Funciones o Clases Principales #####

# calcula la heuristica para una ciudad objetivo
# entrada:
#   goal_city = nombre de la ciudad objetivo
# salida:
#   regresa un diccionario con los valores numericos de la heuristica para la ciudad objetivo
#       introducida por el usuario
def calcular_heuristica_distancia_de_linea_recta(goal):
    # obtiene las coordenadas de la ciudad destino
    coordinate_goal = cities_coordinates[goal.upper()]

    # diccionario que contendra los valores de la heuristica de distancia de linea recta para
    # la ciudad de destino ingresada
    heuristic_linear_straight_distance = {}

    # itera a traves de todas las ciudades disponibles en el grafo
    for city_origin, coordinate_origin in cities_coordinates.items():
        # obtiene la distancia haversine de las dos ciudades correspondientes
        haversine_distance = haversine_distance_between_cities(coordinate_origin,coordinate_goal)
        # agrega al diccionario de heuristica la ciudad de origen y su valor de distancia de linea recta
        heuristic_linear_straight_distance[city_origin] = haversine_distance
    
    # regresa el diccionario con los valores de la heuristica para la ciudad objetivo correspondiente
    return heuristic_linear_straight_distance

def generate_states(graph, available_nodes_names):
    nodes_tuples = []
    nodes_connection_weights = []
    for matrix_row_index in range(len(graph)):
        #print('matrix row' , graph[matrix_row_index])
        connections_and_weights = []
        for matrix_column_index in range(len(graph[0])):
            if graph[matrix_row_index][matrix_column_index] != 0:
                nodes_tuples.append((available_nodes_names[matrix_row_index], available_nodes_names[matrix_column_index]))
                connections_and_weights.append((available_nodes_names[matrix_column_index],graph[matrix_row_index][matrix_column_index]))
        if len(connections_and_weights) != 0:
            nodes_connection_weights.append([available_nodes_names[matrix_row_index], connections_and_weights])
    return nodes_tuples, nodes_connection_weights

def generate_unidirectional_weights(tree):
    unidirectional_tree = tree[0].copy()
    unidirectional_weights = []

    #iterate through the tuples to obtain reversed connection
    for node_tuple in tree[0]:
        city1, city2 = node_tuple
        unidirectional_tree.append((city2, city1))
    
    #obtain the reversed weights
    reversed_weights = {}
    for weight in tree[1]:
        for connection in weight[1]:
            if connection[0] not in reversed_weights:
                reversed_weights[connection[0]] = [(weight[0], connection[1])]
            else:
                previuos_reversed_weight_value = reversed_weights[connection[0]]
                previuos_reversed_weight_value.append((weight[0], connection[1]))
                reversed_weights[connection[0]] = previuos_reversed_weight_value
    
    # merge the weight lists
    for weight in tree[1]:
        current_reversed_weights = []
        try:
            current_reversed_weights = reversed_weights[weight[0]]
        except:
            current_reversed_weights = []
        
        current_connections = weight[1].copy()
        if current_reversed_weights != []:
            for current_reversed_weight in current_reversed_weights:
                current_connections.append(current_reversed_weight)
        
        unidirectional_weights.append[(weight[0], current_connections)]

# encuentra un camino desde el nodo de inicio hasta el nodo meta utilizadno
# el algoritmo de Greedy-Best First Search:
# entrada:
#   start: nombre de la ciudad de inicio
#   goal: nombre de la ciudad meta
#   tree: tupla que contiene las aristas y sus pesos
#   huerisic: una función que toma dos nodos y estima la distancia entre ellos
# salida:
#   path: es el camino encontrado con el menor peso a partir de la heuristica
def greedy(tree, start, goal, h_sld):
    if start == goal:
        # returns the path along with its transition cost
        return ([start],0)
    
    # here we will store all the paths availables as we process them
    # to store the first path, we need to obtain its heuristic value
    path = {h_sld[start] : [start]}

    # update the iteration number
    iteration_counter = 1
    while True:
        
        # select the path with the lowest cost
        key_path_with_lower_value = min([int(key) for key, values in path.items()])
        
        current_node = path[key_path_with_lower_value][-1]
        if current_node == goal:
            # returns the path along with its transition cost
            return (path[key_path_with_lower_value], key_path_with_lower_value)

        # search for the childs of the current node
        childs = [node_weights_list[1] for node_weights_list in tree[1] if node_weights_list[0] == current_node]
        # these childs have the cost of the action, we need to find its heuristic value
        if childs != []:
            childs_with_h_values = []

            for child in childs[0]:
                child_name = child[0]
                # get the heuristic cost of the node
                child_heuristic_value = h_sld[child_name]

                # calculate the transition cost of the current node to the current child via
                #   f(n) = h(n)
                total_transition_cost = child_heuristic_value

                # save the path with the corresponding transition cost
                childs_with_h_values.append((child_name,total_transition_cost))

            sorted_childs_with_h_values = sorted(childs_with_h_values, key = lambda x: x[1])
            # update the paths expanded so far; in this way, we save the alternative paths
            for child in sorted_childs_with_h_values:
                temp_updated_path = path[key_path_with_lower_value].copy()
                temp_updated_path.append(child[0])
                # stores the new paths in the path dictionary
                path[child[1]] = temp_updated_path

            # delete the current path (old)
            del path[key_path_with_lower_value]
        else:
            # After visiting its neighbors, we mark the node as "visited"
            return 'Unable to find a path'
        
        iteration_counter += 1
        
# encuentra un camino desde el nodo de inicio hasta el nodo meta utilizadno
# el algoritmo de A* Search:
# entrada:
#   start: nombre de la ciudad de inicio
#   goal: nombre de la ciudad meta
#   tree: tupla que contiene las aristas y sus pesos
#   h_sld: es un diccionario[string][int] que contiene la heuristica de
#       la distancia de la linea recta, hasta la ciudad meta
# salida:
#   path: es el camino encontrado con el menor peso a partir de la heuristica
#   cost: es el costo del camino según la euristica y el costo de transisión entre nodos
def a_estrella(tree,start,goal, h_sld):
    
    if start == goal:
        # returns the path along with its transition cost
        return ([start],0)
    
    iteration_counter = 0
    print('\n--- search iteration {} ---'.format(iteration_counter))
    
    # here we will store all the paths availables as we process them
    #   to store the first path, we need to obtain its heuristic value
    path = {h_sld[start]: [start]}
    print('path initialised = ', path)

    # update the iteration number
    iteration_counter += 1

    while True:
        print('\n--- search iteration {} ---'.format(iteration_counter))
        
        # select the path with the lowest cost
        key_path_with_lower_value = min([int(key) for key, values in path.items()])
        print(key_path_with_lower_value)
        
        current_node = path[key_path_with_lower_value][-1]
        print('\nnode being explored = ', current_node)

        if current_node == goal:
            # returns the path along with its transition cost
            return (path[key_path_with_lower_value], key_path_with_lower_value)

        # search for the childs of the current node
        childs = [node_weights_list[1] for node_weights_list in tree[1] if node_weights_list[0] == current_node]
        print('\nchilds = ', childs)

        # these childs have the cost of the action, we need to find its heuristic value
        if len(childs) != 0:
            childs_with_h_values = []

            for child in childs[0]:
                print('\nchild being processed ', child)
                child_name = child[0]
                # get the transition cost to the node
                child_action_value = child[1]
                # get the heuristic cost of the node
                child_heuristic_value = h_sld[child_name]
                print('\nchild = {}, action = {}, heuristic = {}'.format(child_name,child_action_value,child_heuristic_value))
                
                # check for the previous cities to update the transition cost
                acucumulative_transition_cost = 0
                current_path = path[key_path_with_lower_value]
                for node_index in range(len(path[key_path_with_lower_value])-1):
                    for transition_cost in tree[1]:
                        if transition_cost[0] == current_path[node_index]:
                            for node in transition_cost[1]:
                                # get the node to transition to
                                if node[0] == current_path[node_index+1]:
                                    acucumulative_transition_cost += node[1]

                acucumulative_transition_cost += child_action_value
                print('acucumulative_transition_cost ', acucumulative_transition_cost)

                # calculate the transition cost of the current node to the current child via
                #   f(n) = g(n) + h(n)
                total_transition_cost = acucumulative_transition_cost + child_heuristic_value
                print('total_transition_cost ', total_transition_cost)

                # save the path with the corresponding transition cost
                childs_with_h_values.append((child_name,total_transition_cost))

            print('\nchilds with h values = ', childs_with_h_values)
            sorted_childs_with_h_values = sorted(childs_with_h_values, key=lambda x: x[1])
            print('\nchilds with h values sorted = ', sorted_childs_with_h_values)

            # update the paths expanded so far; in this way, we save the alternative paths
            for child in sorted_childs_with_h_values:
                temp_updated_path = path[key_path_with_lower_value].copy()
                temp_updated_path.append(child[0])
                # stores the new paths in the path dictionary
                path[child[1]] = temp_updated_path

            # delete the current path (old)
            del path[key_path_with_lower_value]

            print('\navailable paths = ', path)
        else:
            # After visiting its neighbors, we mark the node as "visited"
            return 'Unable to find a path'
        
        iteration_counter += 1

# encuentra un camino desde el nodo de inicio hasta el nodo meta utilizadno
# el algoritmo de wieghted A* Search:
# entrada:
#   start: nombre de la ciudad de inicio
#   goal: nombre de la ciudad meta
#   tree: tupla que contiene las aristas y sus pesos
#   h_sld: es un diccionario[string][int] que contiene la heuristica de
#       la distancia de la linea recta, hasta la ciudad meta
# salida:
#   path: es el camino encontrado con el menor peso a partir de la heuristica
#   cost: es el costo del camino según la euristica y el costo de transisión entre nodos     
def a_estrella_ponderada(tree,start,goal, h_sld):
    
    if start == goal:
        # returns the path along with its transition cost
        return ([start],0)
    
    iteration_counter = 0
    print('\n--- search iteration {} ---'.format(iteration_counter))
    
    # here we will store all the paths availables as we process them
    #   to store the first path, we need to obtain its heuristic value
    path = {((1.3)* h_sld[start]): [start]}
    print('path initialised = ', path)

    # update the iteration number
    iteration_counter += 1

    while True:
        print('\n--- search iteration {} ---'.format(iteration_counter))
        
        # select the path with the lowest cost
        key_path_with_lower_value = min([int(key) for key, values in path.items()])
        print(key_path_with_lower_value)
        
        current_node = path[key_path_with_lower_value][-1]
        print('\nnode being explored = ', current_node)

        if current_node == goal:
            # returns the path along with its transition cost
            return (path[key_path_with_lower_value], key_path_with_lower_value)

        # search for the childs of the current node
        childs = [node_weights_list[1] for node_weights_list in tree[1] if node_weights_list[0] == current_node]
        print('\nchilds = ', childs)

        # these childs have the cost of the action, we need to find its heuristic value
        if len(childs) != 0:
            childs_with_h_values = []

            for child in childs[0]:
                print('\nchild being processed ', child)
                child_name = child[0]
                # get the transition cost to the node
                child_action_value = child[1]
                # get the heuristic cost of the node
                child_heuristic_value_with_detour_index = ((1.3) * h_sld[child_name])
                print('\nchild = {}, action = {}, heuristic = {}'.format(child_name,child_action_value,child_heuristic_value_with_detour_index))
                
                # check for the previous cities to update the transition cost
                acucumulative_transition_cost = 0
                current_path = path[key_path_with_lower_value]
                for node_index in range(len(path[key_path_with_lower_value])-1):
                    for transition_cost in tree[1]:
                        if transition_cost[0] == current_path[node_index]:
                            for node in transition_cost[1]:
                                # get the node to transition to
                                if node[0] == current_path[node_index+1]:
                                    acucumulative_transition_cost += node[1]

                acucumulative_transition_cost += child_action_value
                print('acucumulative_transition_cost ', acucumulative_transition_cost)

                # calculate the transition cost of the current node to the current child via
                #   f(n) = g(n) + h(n)
                total_transition_cost = acucumulative_transition_cost + child_heuristic_value_with_detour_index
                print('total_transition_cost ', total_transition_cost)

                # save the path with the corresponding transition cost
                childs_with_h_values.append((child_name,total_transition_cost))

            print('\nchilds with h values = ', childs_with_h_values)
            sorted_childs_with_h_values = sorted(childs_with_h_values, key=lambda x: x[1])
            print('\nchilds with h values sorted = ', sorted_childs_with_h_values)

            # update the paths expanded so far; in this way, we save the alternative paths
            for child in sorted_childs_with_h_values:
                temp_updated_path = path[key_path_with_lower_value].copy()
                temp_updated_path.append(child[0])
                # stores the new paths in the path dictionary
                path[child[1]] = temp_updated_path

            # delete the current path (old)
            del path[key_path_with_lower_value]

            print('\navailable paths = ', path)
        else:
            # After visiting its neighbors, we mark the node as "visited"
            return 'Unable to find a path'
        iteration_counter += 1

def beam_search(tree, start_node, goal, numero_de_nodos_para_elegir):
    # Initialize an empty queue and the start state.
    queue = []
    queue.append([start_node])
    
    # Loop while the queue is not empty.
    while queue:
        # Generate all possible successor states of the current states and add them to a list of paths.
        paths = []
        for path in queue:
            current_node = path[-1]
            children = [edge[1] for edge in tree if edge[0] == current_node]
            for child in children:
                extended_path = path.copy()
                extended_path.append(child)
                paths.append(extended_path)  
            queue.remove(path)
        
        # Check if any of the successor states is a goal state.
        for path in paths:
            node = path[-1]
            if node == goal:
                return path
        
        # If there are no goal states in the current paths, select the n best paths based on their heuristic value.
        queue = sorted(paths, key=lambda x: haversine_heuristic(x[-1], goal))[:numero_de_nodos_para_elegir]
        
        # If there are no more paths to explore, return None to indicate failure.
        if not queue:
            return print("No hubo un camino con un factor beam de " + numero_de_nodos_para_elegir)
        
    return None

def Steepest_Hill_Climb(tree, start, goal, heuristic = haversine_heuristic):
    path = [start]
    if start == goal:
        return path
    
    while True:
        current_node = path[-1]
        current_distance = heuristic(current_node, goal)
        
        neighbors = [edge[1] for edge in tree[0] if edge[0] == current_node]
        
        for neighbor in neighbors:
            if heuristic(neighbor, goal) < current_distance:
                next_node = neighbor
                path.append(next_node)
                break
        else:
            if path[-1] == goal:
                return path
            else:
                return 'Unable to find a path' 
        
def Stochastic_Hill_Climb(tree, start, goal, heuristic = haversine_heuristic):
    path = [start]
    cost = 0
    if start == goal:
        return (path, cost)
    
    while True:
        current_node = path[-1]
        current_distance = heuristic(current_node, goal)
        neighbors = [edge[1] for edge in tree[0] if edge[0] == current_node]

        filtered_neighbors = filter(lambda x: heuristic(x, goal) < current_distance, neighbors)
        if filtered_neighbors != []:
            random_index = random.randint(0, len(filtered_neighbors) - 1)
            next_node = filtered_neighbors[random_index]
            path.append(next_node)
        else:
            if current_node == goal:
                return (path, cost)
            else:
                return "No se pudo encontrar un camino"
        
        for node_weights in tree[1]:
            if current_node != node_weights[0]:
                continue
            
            for weight in node_weights[1]:
                if current_node != weight[0]:
                    continue
                cost += weight[1]
                break
            break

def generate_initial_solution(tree, start):
    pass

def simmulated_annealing(solucion_inicial, temperatura_inicial, numero_de_iteraciones, temperatura_final, porcentaje_para_reducir):
    pass

def submenu_1(tree, start, opcion):
    goal = validate_in("Ingrese la ciudad meta: ")
    heuristica = calcular_heuristica_distancia_de_linea_recta(goal)
    
    if opcion == 1:
        return greedy(tree, start, goal, heuristica)
    elif opcion == 2:
        return a_estrella(tree,start,goal,heuristica)
    elif opcion == 3:
        return a_estrella_ponderada(tree,start,goal,heuristica)
    elif opcion == 5:
        return Steepest_Hill_Climb(tree, start, goal, heuristica)
    else:
        return Stochastic_Hill_Climb(tree, strat, goal, heuristica)
    

def submenu_2(tree, start):
    goal = validate_in("Ingrese la ciudad meta: ")
    numero_de_nodos_para_elegir = validate_int("¿Cuantos nodos se deben elegir por iteración: ")
    return beam_search(tree, start, goal, numero_de_nodos_para_elegir)

def submenu_3(tree, start):
    pass

def submenu_5(tree, start):
    solucion_inicial = generate_initial_solution(tree, start)
    temperatura_inicial = validate_int("¿Cual es la temperatura inicial? ")
    temperatura_final = 0
    numero_de_iteraciones = validate_int("Ingrese el número de iteraciones por temperatura: ")
    porcentaje_para_reducir = validate_int("Ingrese el número de porcentaje para reducir la temperatura: ")
    return simmulated_annealing(solucion_inicial, temperatura_inicial, numero_de_iteraciones, temperatura_final, porcentaje_para_reducir)

def validate_in(command) -> str:
    """Es una función que se asegura que el nombre ingresado este dentro de los nombres de las ciudades"""
    while True:
        city = input(command).upper()
        if city in names_formed_graph:
            break
        print("El nombre de la ciudad ingresada no esta presente.")
    return city

def validate_int(command) -> int:
    """Es una función que se asegura que se ingreso un número no negativo"""
    while True:
        try:
            numero_ingresado = int(input(command))
            if numero_ingresado >= 0:
                break
            print("Ingrese un número no negativo")
        except:
            print("Ingrese un número")
    return numero_ingresado

def menu():

    ciudad_origen = validate_in("\nIngrese la ciudad de entrada: ")

    print("------Menú------")
    print("\n 1) Greedy Best First Search")
    print("\n 2) A* Search")
    print("\n 3) Weighted A* Search")
    print("\n 4) Beam Search")
    print("\n 5) Steepest Hill Climbing Search")
    print("\n 6) Stochastic Hill Climbing Search")
    print("\n 7) Simulated Annealing Search")

    while True:
        opcion = int(input("\n¿Qué número de algoritmo del menu anterior desea correr (1,2,3,4,5,6,7)? "))
        if opcion > 7:
            print("\nElija una de las opciones disponibles (1,2,3,4,5,6,7)")
        elif opcion < 1:
            print("\nElija una de las opciones disponibles (1,2,3,4,5,6,7)")
        else:
            break

    if opcion < 7:
        tree = generate_states(formed_graph, names_formed_graph)
        print('\ntree = ', tree[0], '\n')
        print('weights = ', tree[1], '\n')
    else:
        tree = generate_states(formed_graph_unidireccional_pesos_heuristica, names_unidireccional)
        print('\ntree = ', tree[0], '\n')
        print('weights = ', tree[1], '\n')

    switch = {
        1: submenu_1(tree, ciudad_origen, opcion),
        2: submenu_1(tree, ciudad_origen, opcion),
        3: submenu_1(tree, ciudad_origen, opcion),
        4: submenu_2(tree, ciudad_origen),
        5: submenu_1(tree, ciudad_origen, opcion),
        6: submenu_1(tree, ciudad_origen, opcion),
        7: submenu_3(tree, ciudad_origen)
    }

    return switch[opcion]
    
def main():
    menu()
    pass

if __name__ == "__main__":
    main()
